/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via [`Try it out`](https://apidoc.flotiq.com) button available next to each endpoint  * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractContentTypeSchemaDefinition from './AbstractContentTypeSchemaDefinition';
import AbstractContentTypeSchemaDefinitionInternal from './AbstractContentTypeSchemaDefinitionInternal';
import MediaAllOf from './MediaAllOf';

/**
 * The Media model module.
 * @module model/Media
 * @version 2.0.0
 */
class Media {
    /**
     * Constructs a new <code>Media</code>.
     * @alias module:model/Media
     * @implements module:model/AbstractContentTypeSchemaDefinition
     * @implements module:model/MediaAllOf
     * @param id {String} 
     * @param url {String} 
     * @param size {Number} 
     * @param type {String} 
     * @param source {String} 
     * @param fileName {String} 
     * @param mimeType {String} 
     * @param extension {String} 
     */
    constructor(id, url, size, type, source, fileName, mimeType, extension) { 
        AbstractContentTypeSchemaDefinition.initialize(this, id);MediaAllOf.initialize(this);
        Media.initialize(this, id, url, size, type, source, fileName, mimeType, extension);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, url, size, type, source, fileName, mimeType, extension) { 
        obj['id'] = id;
        obj['url'] = url;
        obj['size'] = size;
        obj['type'] = type;
        obj['source'] = source;
        obj['fileName'] = fileName;
        obj['mimeType'] = mimeType;
        obj['extension'] = extension;
    }

    /**
     * Constructs a <code>Media</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Media} obj Optional instance to populate.
     * @return {module:model/Media} The populated <code>Media</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Media();
            AbstractContentTypeSchemaDefinition.constructFromObject(data, obj);
            MediaAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('internal')) {
                obj['internal'] = AbstractContentTypeSchemaDefinitionInternal.constructFromObject(data['internal']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('extension')) {
                obj['extension'] = ApiClient.convertToType(data['extension'], 'String');
            }
            if (data.hasOwnProperty('externalId')) {
                obj['externalId'] = ApiClient.convertToType(data['externalId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} id
 */
Media.prototype['id'] = undefined;

/**
 * @member {module:model/AbstractContentTypeSchemaDefinitionInternal} internal
 */
Media.prototype['internal'] = undefined;

/**
 * @member {String} url
 */
Media.prototype['url'] = undefined;

/**
 * @member {Number} size
 */
Media.prototype['size'] = undefined;

/**
 * @member {String} type
 */
Media.prototype['type'] = undefined;

/**
 * @member {Number} width
 */
Media.prototype['width'] = undefined;

/**
 * @member {Number} height
 */
Media.prototype['height'] = undefined;

/**
 * @member {String} source
 */
Media.prototype['source'] = undefined;

/**
 * @member {String} fileName
 */
Media.prototype['fileName'] = undefined;

/**
 * @member {String} mimeType
 */
Media.prototype['mimeType'] = undefined;

/**
 * @member {String} extension
 */
Media.prototype['extension'] = undefined;

/**
 * @member {String} externalId
 */
Media.prototype['externalId'] = undefined;


// Implement AbstractContentTypeSchemaDefinition interface:
/**
 * @member {String} id
 */
AbstractContentTypeSchemaDefinition.prototype['id'] = undefined;
/**
 * @member {module:model/AbstractContentTypeSchemaDefinitionInternal} internal
 */
AbstractContentTypeSchemaDefinition.prototype['internal'] = undefined;
// Implement MediaAllOf interface:
/**
 * @member {String} url
 */
MediaAllOf.prototype['url'] = undefined;
/**
 * @member {Number} size
 */
MediaAllOf.prototype['size'] = undefined;
/**
 * @member {String} type
 */
MediaAllOf.prototype['type'] = undefined;
/**
 * @member {Number} width
 */
MediaAllOf.prototype['width'] = undefined;
/**
 * @member {Number} height
 */
MediaAllOf.prototype['height'] = undefined;
/**
 * @member {String} source
 */
MediaAllOf.prototype['source'] = undefined;
/**
 * @member {String} fileName
 */
MediaAllOf.prototype['fileName'] = undefined;
/**
 * @member {String} mimeType
 */
MediaAllOf.prototype['mimeType'] = undefined;
/**
 * @member {String} extension
 */
MediaAllOf.prototype['extension'] = undefined;
/**
 * @member {String} externalId
 */
MediaAllOf.prototype['externalId'] = undefined;




export default Media;

