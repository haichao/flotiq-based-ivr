/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via [`Try it out`](https://apidoc.flotiq.com) button available next to each endpoint  * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AbstractPropertiesConfigValidation from './AbstractPropertiesConfigValidation';

/**
 * The AbstractPropertiesConfig model module.
 * @module model/AbstractPropertiesConfig
 * @version 2.0.0
 */
class AbstractPropertiesConfig {
    /**
     * Constructs a new <code>AbstractPropertiesConfig</code>.
     * @alias module:model/AbstractPropertiesConfig
     * @param inputType {module:model/AbstractPropertiesConfig.InputTypeEnum} 
     * @param unique {Boolean} 
     */
    constructor(inputType, unique) { 
        
        AbstractPropertiesConfig.initialize(this, inputType, unique);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputType, unique) { 
        obj['inputType'] = inputType;
        obj['unique'] = unique;
    }

    /**
     * Constructs a <code>AbstractPropertiesConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AbstractPropertiesConfig} obj Optional instance to populate.
     * @return {module:model/AbstractPropertiesConfig} The populated <code>AbstractPropertiesConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AbstractPropertiesConfig();

            if (data.hasOwnProperty('inputType')) {
                obj['inputType'] = ApiClient.convertToType(data['inputType'], 'String');
            }
            if (data.hasOwnProperty('unique')) {
                obj['unique'] = ApiClient.convertToType(data['unique'], 'Boolean');
            }
            if (data.hasOwnProperty('readonly')) {
                obj['readonly'] = ApiClient.convertToType(data['readonly'], 'Boolean');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('validation')) {
                obj['validation'] = AbstractPropertiesConfigValidation.constructFromObject(data['validation']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], ['String']);
            }
            if (data.hasOwnProperty('helpText')) {
                obj['helpText'] = ApiClient.convertToType(data['helpText'], 'String');
            }
            if (data.hasOwnProperty('isTitlePart')) {
                obj['isTitlePart'] = ApiClient.convertToType(data['isTitlePart'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/AbstractPropertiesConfig.InputTypeEnum} inputType
 */
AbstractPropertiesConfig.prototype['inputType'] = undefined;

/**
 * @member {Boolean} unique
 */
AbstractPropertiesConfig.prototype['unique'] = undefined;

/**
 * @member {Boolean} readonly
 */
AbstractPropertiesConfig.prototype['readonly'] = undefined;

/**
 * @member {Boolean} hidden
 */
AbstractPropertiesConfig.prototype['hidden'] = undefined;

/**
 * @member {module:model/AbstractPropertiesConfigValidation} validation
 */
AbstractPropertiesConfig.prototype['validation'] = undefined;

/**
 * @member {Array.<String>} options
 */
AbstractPropertiesConfig.prototype['options'] = undefined;

/**
 * @member {String} helpText
 */
AbstractPropertiesConfig.prototype['helpText'] = undefined;

/**
 * @member {Boolean} isTitlePart
 */
AbstractPropertiesConfig.prototype['isTitlePart'] = undefined;





/**
 * Allowed values for the <code>inputType</code> property.
 * @enum {String}
 * @readonly
 */
AbstractPropertiesConfig['InputTypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "richtext"
     * @const
     */
    "richtext": "richtext",

    /**
     * value: "textarea"
     * @const
     */
    "textarea": "textarea",

    /**
     * value: "email"
     * @const
     */
    "email": "email",

    /**
     * value: "number"
     * @const
     */
    "number": "number",

    /**
     * value: "radio"
     * @const
     */
    "radio": "radio",

    /**
     * value: "checkbox"
     * @const
     */
    "checkbox": "checkbox",

    /**
     * value: "select"
     * @const
     */
    "select": "select",

    /**
     * value: "datasource"
     * @const
     */
    "datasource": "datasource"
};



export default AbstractPropertiesConfig;

