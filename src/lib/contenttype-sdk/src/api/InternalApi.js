/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via [`Try it out`](https://apidoc.flotiq.com) button available next to each endpoint  * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContentTypeDefinitionSchema from '../model/ContentTypeDefinitionSchema';

/**
* Internal service.
* @module api/InternalApi
* @version 2.0.0
*/
export default class InternalApi {

    /**
    * Constructs a new InternalApi. 
    * @alias module:api/InternalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteContentDefinition operation.
     * @callback module:api/InternalApi~deleteContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete ConentTypeDefinition
     * @param {String} id Id of content type definition
     * @param {module:api/InternalApi~deleteContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteContentDefinition(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteContentDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentDefinition operation.
     * @callback module:api/InternalApi~getContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an user-defined Content Definitions
     * @param {String} id Id of content type definition
     * @param {module:api/InternalApi~getContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getContentDefinition(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContentDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContentDefinitions operation.
     * @callback module:api/InternalApi~getContentDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ContentTypeDefinitionSchema>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of user-defined Content Definitions
     * @param {module:api/InternalApi~getContentDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ContentTypeDefinitionSchema>}
     */
    getContentDefinitions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ContentTypeDefinitionSchema];
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postContentDefinition operation.
     * @callback module:api/InternalApi~postContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new ConentTypeDefinition to store new type of ContentObjects
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeDefinitionSchema} opts.contentTypeDefinitionSchema 
     * @param {module:api/InternalApi~postContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postContentDefinition(opts, callback) {
      opts = opts || {};
      let postBody = opts['contentTypeDefinitionSchema'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putContentDefinition operation.
     * @callback module:api/InternalApi~putContentDefinitionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ConentTypeDefinition
     * @param {String} id Id of content type definition
     * @param {Object} opts Optional parameters
     * @param {module:model/ContentTypeDefinitionSchema} opts.contentTypeDefinitionSchema 
     * @param {module:api/InternalApi~putContentDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putContentDefinition(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['contentTypeDefinitionSchema'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putContentDefinition");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/internal/contenttype/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
