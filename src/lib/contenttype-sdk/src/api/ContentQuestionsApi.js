/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via [`Try it out`](https://apidoc.flotiq.com) button available next to each endpoint  * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchResponse from '../model/BatchResponse';
import Question from '../model/Question';
import QuestionList from '../model/QuestionList';

/**
* ContentQuestions service.
* @module api/ContentQuestionsApi
* @version 2.0.0
*/
export default class ContentQuestionsApi {

    /**
    * Constructs a new ContentQuestionsApi. 
    * @alias module:api/ContentQuestionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchCreatequestion operation.
     * @callback module:api/ContentQuestionsApi~batchCreatequestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.updateExisting Overwrite existing objects
     * @param {Array.<module:model/Question>} opts.question 
     * @param {module:api/ContentQuestionsApi~batchCreatequestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResponse}
     */
    batchCreatequestion(opts, callback) {
      opts = opts || {};
      let postBody = opts['question'];

      let pathParams = {
      };
      let queryParams = {
        'updateExisting': opts['updateExisting']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchResponse;
      return this.apiClient.callApi(
        '/api/v1/content/question/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createquestion operation.
     * @callback module:api/ContentQuestionsApi~createquestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Question} opts.question 
     * @param {module:api/ContentQuestionsApi~createquestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createquestion(opts, callback) {
      opts = opts || {};
      let postBody = opts['question'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/content/question', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletequestion operation.
     * @callback module:api/ContentQuestionsApi~deletequestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id ContentObject identifier
     * @param {module:api/ContentQuestionsApi~deletequestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletequestion(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletequestion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/content/question/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getquestion operation.
     * @callback module:api/ContentQuestionsApi~getquestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Question} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id ContentObject identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.hydrate Should hydrate relations of object
     * @param {module:api/ContentQuestionsApi~getquestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Question}
     */
    getquestion(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getquestion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'hydrate': opts['hydrate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Question;
      return this.apiClient.callApi(
        '/api/v1/content/question/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionList operation.
     * @callback module:api/ContentQuestionsApi~questionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuestionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.page Listing page number, 1-based
     * @param {String} opts.limit Page limit
     * @param {String} opts.orderBy Order by field
     * @param {String} opts.orderDirection Order direction
     * @param {String} opts.hydrate Should hydrate relations of object
     * @param {module:api/ContentQuestionsApi~questionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuestionList}
     */
    questionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'hydrate': opts['hydrate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuestionList;
      return this.apiClient.callApi(
        '/api/v1/content/question', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatequestion operation.
     * @callback module:api/ContentQuestionsApi~updatequestionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id ContentObject identifier
     * @param {Object} opts Optional parameters
     * @param {module:model/Question} opts.question 
     * @param {module:api/ContentQuestionsApi~updatequestionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatequestion(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['question'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatequestion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/content/question/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
