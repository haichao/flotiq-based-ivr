/**
 * Flotiq User API
 * ## Getting started   This is your Flotiq User API that allows you to access your data through the Content API that you defined.   ### Access to data   There are several methods that you can use to access your data:  * Live API docs - available via [`Try it out`](https://apidoc.flotiq.com) button available next to each endpoint  * Copying example code on the right side of each endpoint  * By downloading the SDKs available in mulitple languages.  * By downloading the Postman collection and importing it into Postman.    Each of these methods is described in length in the [user documentation](https://flotiq.com/docs/).   ### Authorization   In order to make use of the provided documentation, example code, SDKs and so on - you will need to pull out your API key. We recommend that you start with the ReadOnly API Key which will allow you to make all the `GET` requests but will error-out when you try to modify content. Please remember to replace the key for `POST`, `PUT` and `DELETE` calls.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@flotiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchResponse from '../model/SearchResponse';

/**
* SearchAPI service.
* @module api/SearchAPIApi
* @version 2.0.0
*/
export default class SearchAPIApi {

    /**
    * Constructs a new SearchAPIApi. 
    * @alias module:api/SearchAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/SearchAPIApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint for search Queries for Headless Types
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query
     * @param {Array.<String>} opts.fields Search only in selected fields. Default: title, rawContent
     * @param {String} opts.page Listing page number, 1-based
     * @param {String} opts.limit Page limit
     * @param {String} opts.orderBy Order by field
     * @param {String} opts.orderDirection Order direction
     * @param {Array.<String>} opts.contentType Restrict search to content types set
     * @param {Array.<String>} opts.aggregateBy Field to aggregate results direction
     * @param {Object} opts.filters Filter by object properties. Expected format: {property1: value1, property2: value2}
     * @param {Object} opts.postFilters Filter by object properties. Use it when you want aggregated counts without filters applied. Expected format: {property1: value1, property2: value2}
     * @param {module:api/SearchAPIApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponse}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'q': opts['q'],
        'fields[]': this.apiClient.buildCollectionParam(opts['fields'], 'multi'),
        'page': opts['page'],
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'content_type[]': this.apiClient.buildCollectionParam(opts['contentType'], 'multi'),
        'aggregate_by[]': this.apiClient.buildCollectionParam(opts['aggregateBy'], 'multi'),
        'filters': opts['filters'],
        'post_filters': opts['postFilters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/api/v1/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
